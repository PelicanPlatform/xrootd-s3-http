name: Test

on:
  workflow_dispatch:
    branches:
      - main
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug

jobs:
  build:
    strategy:
      matrix:
        external-gtest: [ YES ]
        os: [ ubuntu-24.04 ]

    runs-on: ${{ matrix.os }}
    name: Build with external_gtest=${{ matrix.external-gtest }} on ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive
    - uses: actions/setup-go@v5
      with:
        go-version: '1.23.5'
    - name: install deps
      working-directory: ${{runner.workspace}}
      run: |
        # Build deps
        sudo apt update && sudo apt-get install -y cmake libz-dev uuid-dev libcurl4-openssl-dev libcurl4 pkg-config libssl-dev g++ libscitokens-dev libgtest-dev

        # Build our preferred set of patches on xrootd
        git clone https://github.com/xrootd/xrootd.git
        cd xrootd
        git remote add github_pelican https://github.com/PelicanPlatform/xrootd.git
        git fetch github_pelican
        git checkout -b v5.8.4-pelican -t github_pelican/v5.8.4-pelican
        mkdir -p build/release_dir
        cd build
        cmake .. -DCMAKE_INSTALL_PREFIX=$PWD/release_dir -DENABLE_ASAN=TRUE
        make -j $(($(nproc) + 2)) install

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure CMake
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: CMAKE_PREFIX_PATH=$PWD/../xrootd/build/release_dir/lib/cmake/XRootD cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DENABLE_TESTS=yes -DENABLE_ASAN=true -DXROOTD_PLUGINS_EXTERNAL_GTEST=${{ matrix.external-gtest }}

    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config $BUILD_TYPE

    - name: Unit Tests
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C $BUILD_TYPE --verbose

    - name: Start xrootd
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: ASAN_OPTIONS=detect_odr_violation=0 LD_LIBRARY_PATH=$PWD/../xrootd/build/release_dir/lib $PWD/../xrootd/build/release_dir/bin/xrootd -c ${{runner.workspace}}/xrootd-s3-http/test/s3-xrootd-test.cfg &

    - name: Get a file
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: curl -f http://localhost:8080/aws-opendata/2024/wod_apb_2024.nc -o wod_apb_2024.nc

    - name: Fail a file
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: |
        if curl -f http://localhost:8080/aws-opendata/2024/bogus_file_name; then
          echo "Error: Command unexpectedly succeeded."
          exit 1
        else
          echo "Command failed as expected."
        fi

    - name: Get metadata
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: curl -f -k -X PROPFIND http://localhost:8080/aws-opendata/2024/wod_apb_2024.nc -d prop_query
